var AWS_keys = require('./config.js');
var AWS = require('aws-sdk');

// Set the region 
AWS.config.update({
    aws_access_key_id : AWS_keys.key,
    aws_secret_access_key : AWS_keys.secret,
    region: 'us-east-2'
});

var ec2 = new AWS.EC2({apiVersion: '2016-11-15'});

const messageInstanceId= "i-***********";

const instanceParam = {
    InstanceIds: [process.argv[3],process.argv[4],process.argv[5],process.argv[6]],
};

const stopInstance=(params)=>{-----
    ec2.stopInstances(params, function(err, data) {
      if (err && err.code === 'DryRunOperation') {
        params.DryRun = false;
        ec2.stopInstances(params, function(err, data) {
            if (err) {
              console.log("Error", err);
            } else if (data) {
              
              console.log("Server stopped Successfully", data.StoppingInstances);
            }
        });
      }
    });
  }

ec2.describeInstances(instanceParam, (err, data)=>{
    if (err) {
    console.log("Error", err.stack);
    } else {
    try{
        const InstanceData0 = data.Reservations[0].Instances[0];
        const InstanceData1 = data.Reservations[1].Instances[0];
        const InstanceData2 = data.Reservations[2].Instances[0];
        const InstanceData3 = data.Reservations[3].Instances[0];
        const allInstanceStatus=[];
        if(InstanceData0) allInstanceStatus.push(InstanceData0);
        if(InstanceData1) allInstanceStatus.push(InstanceData1);
        if(InstanceData2) allInstanceStatus.push(InstanceData2);
        if(InstanceData3) allInstanceStatus.push(InstanceData3);

        const messageInstance = allInstanceStatus.find(e=>e.InstanceId === messageInstanceId);
        const otherInstance = allInstanceStatus.filter(e=>e.InstanceId !== messageInstanceId);


        console.log(`Instance ID 0: ${InstanceData0.InstanceId} ${InstanceData0.State.Name}`);
        console.log(`Instance ID 1: ${InstanceData1.InstanceId} ${InstanceData1.State.Name}`);
        console.log(`Instance ID 2: ${InstanceData2.InstanceId} ${InstanceData2.State.Name}`);
        console.log(`Instance ID 3: ${InstanceData3.InstanceId} ${InstanceData3.State.Name}`);

        if(messageInstance.State.Name.toUpperCase() === "RUNNING"){
            let status= false;
            otherInstance.map(e=>{if(e.State.Name.toUpperCase() === "RUNNING") status=true;});
            if(status){
                console.log("OTHER STAGING SERVERS ARE RUNNING");
            }else{
                console.log("MESSAGE STAGING IS STOPPING NOW.");
                stopInstance({
                    InstanceIds: [messageInstanceId],
                    DryRun: true
                    });
            }
            
        }else{
            console.log("MESSAGE STAGING IS ALREADY STOPPED.");
        }
    }catch(error){
    console.log("ERROR",error);
    }
}
}
);
